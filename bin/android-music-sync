#!/usr/bin/env python3

# Script to sync a .m3u music playlist to an Android device
# Requires adb to be installed and the device to be associated

import os
import argparse
import subprocess

parser = argparse.ArgumentParser(description="Sync music with an android device")
parser.add_argument("playlist", help="the playlist file to sync", nargs="?", default="/home/ale/Music/playlist.m3u")
parser.add_argument("destination", nargs="?", default="/sdcard/Music", help="music folder on the android device")
parser.add_argument("--dry-run", "-d", help="list only operations to do, but don't copy/delete any file", action="store_true")

args = parser.parse_args()

with open(args.playlist) as f:
    content = f.read()

playlist = []
for line in content.splitlines():
    if not line.startswith("#"):
        playlist.append(line)
   
print(f"Playlist {args.playlist} contains {len(line)} songs")

result = subprocess.run(
        ["adb", "get-state"],
        check=False,
        stdout=subprocess.PIPE
)

if "device" not in str(result.stdout):
    print("Ensure Android device is connected")
    exit(1)

device_songs = subprocess.check_output(["adb", "shell", "ls", args.destination]).decode("utf-8").splitlines()
to_copy = []
to_delete = []

for song in playlist:
    if os.path.basename(song) not in device_songs:
        to_copy.append(song)

song_names = list(map(os.path.basename, playlist))
for song in device_songs:
    if song not in song_names:
        to_delete.append(os.path.join(args.destination, song))
        
for i, f in enumerate(to_copy):
    print(f"Copy [{i+1}/{len(to_copy)}]: {f} -> {os.path.join(args.destination, os.path.basename(f))}")

    if not args.dry_run:
        subprocess.call(["adb", "push", f, args.destination])

for i, f in enumerate(to_delete):
    f = os.path.join(args.destination, f)
    print(f"Delete [{i+1}/{len(to_delete)}]: {f}")

    if not args.dry_run:
        subprocess.call(["adb", "shell", f"rm '{f}'"])

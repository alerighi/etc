#!/hint/zsh
# ZSH configuration file
# Author: Alessandro Righi <alessandro.righi@alerighi.it>

# Checks if running on macOS
is_mac() {
	test "$(uname)" = "Darwin"
}

if is_mac; then
	export HOMEBREW_PREFIX="/opt/homebrew"
	export HOMEBREW_CELLAR="/opt/homebrew/Cellar"
	export HOMEBREW_REPOSITORY="/opt/homebrew"
	export HOMEBREW_AUTO_UPDATE_SECS=3600
	export PATH="/opt/homebrew/bin:/opt/homebrew/sbin${PATH+:$PATH}"
	export MANPATH="/opt/homebrew/share/man:/opt/homebrew/opt/coreutils/libexec/gnuman${MANPATH+:$MANPATH}:"
	export INFOPATH="/opt/homebrew/share/info:${INFOPATH:-}"
fi

if [[ -o login ]] && type fortune >/dev/null && type cowsay >/dev/null; then
	fortune | cowsay
fi

##
# Environment section
##

# Add a path to $PATH
add2path() {
	# only if file is a directory and it's not already in PATH
	if [ -d "$1" ] && ! echo "${PATH}" | sed 's/:/\n/g' | grep -x "$1" >/dev/null; then
		export PATH="$1:${PATH}"
	fi
}

# Android SDK
if is_mac; then
	export ANDROID_HOME="${HOME}/Library/Android/sdk"
else
	export ANDROID_HOME="${HOME}/.android/sdk"
fi

add2path "${ANDROID_HOME}/emulator"
add2path "${ANDROID_HOME}/tools"
add2path "${ANDROID_HOME}/tools/bin"
add2path "${ANDROID_HOME}/platform-tools"

# NOTE: adding after to add them in front of the path
if is_mac; then
	add2path "/opt/homebrew/opt/python/libexec/bin/"
	add2path "/opt/homebrew/opt/coreutils/libexec/gnubin/"
	add2path "/opt/homebrew/opt/binutils/bin"
fi

add2path "${HOME}/.local/bin"
add2path "${HOME}/.cargo/bin"

eval $(dircolors)

# Less settings for nice color output
export LESS_ADVANCED_PREPROCESSOR=1
export LESS="-R"
export LESS_TERMCAP_mb=$'\E[1;31m'
export LESS_TERMCAP_md=$'\E[1;36m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'

# Setup editor (of course, vim)
export EDITOR="vim"

# Set locale to english (don't want error messages in italian...)
export LANG="en_US.UTF-8"
export LANGUAGE="en"

# Aliases
alias ls="ls --color"
alias ll="ls -lhF"
alias la="ls -lAhF"
alias l="ls -lhF"
alias grep="grep --color=always"
alias du="du -h"
alias dd="dd status=progress"
alias ip="ip --color=auto"

# Replaces vim with neo vim when found
if type nvim >/dev/null; then
	alias vim="nvim"
	export EDITOR="nvim"
fi

if is_mac; then
	alias lsusb="system_profiler SPUSBDataType"
fi

##
# Shell configuration
##

setopt noclobber  	# do not accidentaly truncate existing files with >
setopt correct    	# autocorrect commands
setopt autocd     	# automaticaly cd by typing the name of the directory
setopt completealiases	# autocompletion for aliases
setopt noautopushd	# do not automatically pushd
setopt pushdignoredups  # ignore pushd duplicated
setopt histignoredups	# ignore history duplicates
setopt appendhistory	# append to history
setopt incappendhistory # append history immediately
setopt extendedglob 	# extended globs
setopt notify

# Set completion path to include /usr/local
fpath=("/usr/local/share/zsh-completions" "/usr/local/etc/bash_completion.d" ${fpath})

if is_mac; then
	fpath=("/opt/homebrew/share/zsh/site-functions/" "/opt/homebrew/etc/bash_completion.d" ${fpath})
fi

# Enable completion
autoload -Uz +X compinit && compinit

# Compatibility with bash autocomplete
autoload -Uz +X bashcompinit && bashcompinit

# Use LS_COLORS for completion
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# Use menu for completion
zstyle ':completion:*' menu select

# Completion for kill command
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,ucomm,comm'

# Rehash on completion, useful to get completions when you install new software
zstyle ':completion:*:commands' rehash 1

# Case insensitive match
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# History settings
HISTFILE="${HOME}/.zsh_history"
HISTSIZE=100000
SAVEHIST=100000

# Bind keys in emacs mode
bindkey -e

# Key bindings
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi

# Froze the tty, avoid that other programs change settings
ttyctl -f

##
# Add plugins and integrations
##
PLUGINS_DIR="${HOME}/.local/share/zsh"

install_plugin() {
	local plugin_path="${PLUGINS_DIR}/$1"
	local plugin_dir="$(dirname "${plugin_path}")"

	if ! test -d "${plugin_dir}"; then
		git clone "$2" "${plugin_dir}"
	fi
}

install_plugin "zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" "https://github.com/zsh-users/zsh-syntax-highlighting.git"
install_plugin "gitstatus/gitstatus.plugin.zsh" "https://github.com/romkatv/gitstatus"

# WARN: plugins must be sourced not in a function, othwerise there can be errors!
source "${PLUGINS_DIR}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
source "${PLUGINS_DIR}/gitstatus/gitstatus.prompt.zsh"

unset PLUGINS_DIR

# Virtualenvwrapper
if type virtualenvwrapper.sh >/dev/null; then
	source virtualenvwrapper_lazy.sh
fi

# iTerm2 integration
if [ -e "${HOME}/.iterm2_shell_integration.zsh" ]; then
	source "${HOME}/.iterm2_shell_integration.zsh"
fi

##
# Prompt related functions
##
PROMPT=$'%F{%(!.red.green)}%n%F{cyan}@%F{blue}%m %F{cyan}%$((-GITSTATUS_PROMPT_LEN-1))<â€¦<%~%<<%f${GITSTATUS_PROMPT:+ $GITSTATUS_PROMPT}\n %F{blue}%(!.#.$)%f '
RPROMPT='%F{blue}[ %F{magenta}${__rprompt_hours}${__rprompt_minutes}${__rprompt_seconds}${__rprompt_command_status}%F{blue} ]%f'

# Function that gets executed before a command is executed
preexec() {
	__last_command_start_time=${SECONDS}
}

# Function that gets executed before the prompt is displayed
precmd() {
	local return_value=$?

	__rprompt_command_status="%F{green}ok"
	__rprompt_hours=
	__rprompt_minutes=
	__rprompt_seconds=

	if test -n "${__last_command_start_time}"; then
		local execution_time=$((SECONDS - __last_command_start_time))
		unset __last_command_start_time

		if ((return_value != 0)); then
			__rprompt_command_status="%F{red}fail %F{blue}status %F{yellow}${return_value}"
		fi

		if ((execution_time >= 3600)); then
			__rprompt_hours="$((execution_time / 3600))h "
		fi

		if ((execution_time >= 60)); then
			__rprompt_minutes="$((execution_time % 3600 / 60))m "
		fi

		if ((execution_time > 1)); then
			__rprompt_seconds="$((execution_time % 60))s "
		fi
	fi

	# Set apple terminal user@host window title
	print -Pn "\e]2;%n@%M\a"
}

##
# Custom functions
##

# Make a directory and cd into it
mcd() {
	if ((# != 1)); then
		echo "Usage: mcd <directory>"
		return 1
	fi

	if ! test -e "$1"; then
		mkdir "$1" || return 1
	fi

	cd "$1"
}

# Run a C program as a script
run() {
	if ((# < 1)); then
		echo "Usage: run program.c othersource.c"
		return 1
	fi

	local exe=$(mktemp)

	gcc -o "${exe}" "$@" && "${exe}"
	rm -f "${exe}"
}

# Clone a Github repository in the proper directory
ghclone() {
	if ((# < 1)); then
		echo "Usage: ghclone owner/repo"
		return 1
	fi
	local repo=$1
	local destination="${HOME}/git/${repo}"
	local remote="git@github.com:${repo}.git"

	git clone "${remote}" "${destination}" && cd "${destination}"
}

reloadconf() {
	source "${HOME}/.zshrc"
}

